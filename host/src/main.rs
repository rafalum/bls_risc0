// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{
    METHOD_ELF, METHOD_ID
};
use risc0_zkvm::{default_prover, ExecutorEnv};

extern crate rand;
use rand::*;

extern crate blst;
use blst::min_pk::*;


fn main() {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    let number_keys = 32;

    let mut rng = rand::thread_rng();
    let mut public_keys = Vec::with_capacity(number_keys);

    for _ in 0..number_keys {
        let mut ikm = [0u8; 32];
        rng.fill_bytes(&mut ikm);

        let sk = SecretKey::key_gen(&ikm, &[]).unwrap();
        let pk = sk.sk_to_pk();
        public_keys.extend(pk.serialize());
    }


    let env = ExecutorEnv::builder()
        .write(&number_keys)
        .unwrap()
        .write_slice(&public_keys)
        .build()
        .unwrap();

    // Obtain the default prover.
    let prover = default_prover();

    // Proof information by proving the specified ELF binary.
    // This struct contains the receipt along with statistics about execution of the guest
    let prove_info = prover
        .prove(env, METHOD_ELF)
        .unwrap();

    // extract the receipt.
    let receipt = prove_info.receipt;

    // Extract the aggregated public key from the receipt.
    let _output: [u8; 96]= receipt.journal.bytes[0..96].try_into().unwrap();
    let _agg_pk = PublicKey::deserialize(&_output).unwrap();


    // The receipt was verified at the end of proving, but the below code is an
    // example of how someone else could verify this receipt.
    receipt
        .verify(METHOD_ID)
        .unwrap();
}
